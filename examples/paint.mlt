type part    = Part of string
type product = Product of part * part * part
type cleaned = Cleaned of part
type painted = Painted of cleaned
type dusted  = Dusted of part

operation Disassemble : product ~> part * part * part # 1
operation CleanTwo    : part * part ~> ([1]cleaned) * ([3]cleaned) # 2
operation Clean       : part ~> cleaned # 1
operation PaintTwo    : cleaned * cleaned ~> ([2]painted) * ([3]painted) # 4
operation PaintLeft   : cleaned ~> [2]painted # 1
operation PaintRight  : cleaned ~> [3]painted # 2
operation Dust        : part ~> [0]dusted # 3
operation Assemble    : dusted * painted * painted ~> product # 5

let clean_handler = 
  handler 
  | x -> x
  | Clean (Part p) k ->
      delay 1;
      continue k with (Cleaned (Part (cat ("cleaned_", p))))

let clean_two_handler =
  handler
  | x -> x
  | CleanTwo (ldoor, rdoor) k ->
      let cl_ldoor = perform Clean ldoor in
      let cl_rdoor = perform Clean rdoor in
      continue k with ((box 1 cl_ldoor),(box 3 cl_rdoor))

let paint_handler = 
  handler
  | x -> x
  | PaintLeft (Cleaned (Part ldoor)) k ->
      delay 1;
      continue k with (box 2 (Painted (Cleaned (Part (cat ("painted_",ldoor))))))
  | PaintRight (Cleaned (Part rdoor)) k ->
      delay 2;
      continue k with (box 3 (Painted (Cleaned (Part (cat ("painted_",rdoor))))))

let paint_two_handler =
  handler
  | x -> x
  | PaintTwo (ldoor, rdoor) k -> 
      let boxed_cl_ldoor = perform PaintLeft ldoor in
      delay 1;
      let boxed_cl_rdoor = perform PaintRight rdoor in
      continue k with (boxed_cl_ldoor,boxed_cl_rdoor)

let dust_handler =
  handler
  | x -> x
  | Dust (Part body) k ->
      let boxed_pl_body = box 0 (Dusted (Part (cat ("dusted_",body)))) in
      delay 3;
      continue k with boxed_pl_body

let disassemble_assemble_handler =
  handler
  | x -> x
  | Disassemble (Product (body, ldoor, rdoor)) k ->
      delay 1;
      continue k with (body, ldoor, rdoor)
  | Assemble ((Dusted body), (Painted (Cleaned ldoor)), (Painted (Cleaned rdoor))) k ->
      delay 5;
      continue k with (Product (body, ldoor, rdoor))

let prog () =
  let (body,ldoor,rdoor) = 
    perform Disassemble (Product ((Part "body"), (Part ("left_door")), (Part "right_door"))) in
  let (boxed_cl_ldoor,boxed_cl_rdoor) = 
    perform CleanTwo (ldoor,rdoor) in
  let boxed_ds_body = 
    perform Dust body in
  let (boxed_pt_ldoor,boxed_pt_rdoor) = 
    perform PaintTwo ((unbox boxed_cl_ldoor),(unbox boxed_cl_rdoor)) in
  delay 4;
  perform Assemble ((unbox boxed_ds_body), (unbox boxed_pt_ldoor), (unbox boxed_pt_rdoor))

run
  handle
    handle
      handle
        handle
          handle 
            handle 
              prog ()
            with clean_two_handler
          with paint_two_handler
        with clean_handler
      with paint_handler
    with dust_handler
  with disassemble_assemble_handler