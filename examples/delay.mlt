type nat =
  | Zero
  | Succ of nat

let foo_int =
  function
  | Zero -> 0
  | Succ m -> 1

let foo_int_bad =
  function
  | Zero -> delay 3 0
  | Succ m -> delay 3 2

let del n = delay 9 (foo_int_bad (delay 2 (Succ n)))

let higher n = fun m -> delay 5 (n + m)

let higher2 n = delay 10 (fun m -> delay 5 (n + m))

let foo f f2 n = f n; f n; f n; f2 n; f2 n;  delay 42 ()

let bar n = delay 24 ()

let bar2 n = delay 23 ()

let foobar () = foo bar bar2 7

run
  let foo = Zero in
  let bar = Succ foo in
  delay 4 (let foobar = foo_int foo in
  delay 1 (foo_int bar))
